import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import jsPDF from 'jspdf';
import { FiDownload, FiPieChart, FiUsers, FiBarChart } from 'react-icons/fi';
import { Link } from 'react-router-dom';
import { fetchAllUsers } from '../../Redux/Slices/user_slice';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from 'recharts';
import AcademyFinancialReportModal from './academy_financial_report';

const AdminProgramReachReport = () => {
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(fetchAllUsers());
  }, [dispatch]);

  const allUsers = useSelector(state => state.user.allUsers || []);
  const loading = useSelector(state => state.user.loading);
  const orders = useSelector(state => state.order.orders || []);
  const loadingOrders = useSelector(state => state.order.loading);

  const academyUsers = allUsers.filter(user => user.role === 'academy');
  const cooperativeUsers = allUsers.filter(user => user.role === 'cooperative');

  // Monthly growth data (last 6 months)
  const today = new Date();
  const startDate = new Date(today.getFullYear(), today.getMonth() - 6, 1);
  const endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
  const monthlyGrowth = React.useMemo(() => {
    const months = [];
    for (let i = 5; i >= 0; i--) {
      const date = new Date(today.getFullYear(), today.getMonth() - i, 1);
      const monthName = date.toLocaleString('default', { month: 'long' });
      months.push({
        month: monthName,
        newAcademies: academyUsers.filter(a => {
          const joinDate = new Date(a.date_joined);
          return joinDate.getMonth() === date.getMonth() &&
            joinDate.getFullYear() === date.getFullYear();
        }).length,
        newCooperatives: cooperativeUsers.filter(c => {
          const joinDate = new Date(c.date_joined);
          return joinDate.getMonth() === date.getMonth() &&
            joinDate.getFullYear() === date.getFullYear();
        }).length
      });
    }
    return months;
  }, [academyUsers, cooperativeUsers, today]);

  const handleDownloadPDF = () => {
    const pdf = new jsPDF({ orientation: 'portrait', unit: 'pt', format: 'a4' });
    let y = 40;
    pdf.setFontSize(24);
    pdf.text('Program Reach Report', 40, y);
    y += 30;
    pdf.setFontSize(12);
    pdf.text(`Reporting Period: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`, 40, y);
    y += 20;
    pdf.text('Generated by: AI-Driven School Feeding System', 40, y);
    y += 40;
    pdf.setFontSize(16);
    pdf.text('1. Summary Statistics', 40, y);
    y += 30;
    pdf.setFontSize(12);
    pdf.text(`Total Academies: ${academyUsers.length}`, 60, y);
    y += 20;
    pdf.text(`Total Cooperatives: ${cooperativeUsers.length}`, 60, y);
    y += 40;
    pdf.setFontSize(16);
    pdf.text('2. List of Participating Academies', 40, y);
    y += 30;
    pdf.setFontSize(12);
    academyUsers.forEach((academy, index) => {
      if (y > 750) { pdf.addPage(); y = 40; }
      pdf.text(`${index + 1}. ${academy.username || academy.email || '-'}`, 60, y);
      y += 20;
    });
    y += 20;
    pdf.setFontSize(16);
    pdf.text('3. List of Participating Cooperatives', 40, y);
    y += 30;
    pdf.setFontSize(12);
    cooperativeUsers.forEach((coop, index) => {
      if (y > 750) { pdf.addPage(); y = 40; }
      pdf.text(`${index + 1}. ${coop.username || coop.email || '-'}`, 60, y);
      y += 20;
    });
    pdf.save('wfp_program_reach_report.pdf');
  };

  return (
    <div className="max-w-6xl mx-auto p-8 space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Program Reach Report</h1>
          <p className="text-gray-600">
            Reporting Period: {startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}
          </p>
          <p className="text-gray-500 mt-1">Generated by: AI-Driven School Feeding System</p>
        </div>
        <button
          className="bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center gap-2"
          onClick={handleDownloadPDF}
        >
          <FiDownload /> Download PDF
        </button>
      </div>

      {/* Summary Statistics */}
      <div className="bg-white rounded-xl border border-gray-200 p-6">
        <h2 className="text-xl font-semibold mb-4 text-blue-700 flex items-center gap-2">
          <FiPieChart /> Summary Statistics
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-blue-50 rounded-lg p-4">
            <div className="text-4xl font-bold text-blue-700">{academyUsers.length}</div>
            <div className="text-sm text-blue-600 mt-1">Total Academies</div>
          </div>
          <div className="bg-green-50 rounded-lg p-4">
            <div className="text-4xl font-bold text-green-700">{cooperativeUsers.length}</div>
            <div className="text-sm text-green-600 mt-1">Total Cooperatives</div>
          </div>
        </div>
      </div>

      {/* Monthly Growth Chart */}
      <div className="bg-white rounded-xl border border-gray-200 p-6">
        <h2 className="text-xl font-semibold mb-4 text-purple-700 flex items-center gap-2">
          <FiBarChart /> Monthly Growth
        </h2>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={monthlyGrowth} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="month" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="newAcademies" name="New Academies" fill="#3B82F6" />
              <Bar dataKey="newCooperatives" name="New Cooperatives" fill="#10B981" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Lists */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Academies List */}
        <div className="bg-white rounded-xl border border-gray-200 p-6">
          <h2 className="text-xl font-semibold mb-4 text-blue-700 flex items-center gap-2">
            <FiUsers /> Participating Academies
          </h2>
          {loading ? (
            <div className="text-gray-500 text-center py-4">Loading academies...</div>
          ) : (
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Username</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-100">
                {academyUsers.map((user, index) => (
                  <tr key={user.id || index}>
                    <td className="px-6 py-4 whitespace-nowrap">{user.username || '-'}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{user.email || '-'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>

        {/* Cooperatives List */}
        <div className="bg-white rounded-xl border border-gray-200 p-6">
          <h2 className="text-xl font-semibold mb-4 text-green-700 flex items-center gap-2">
            <FiUsers /> Participating Cooperatives
          </h2>
          {loading ? (
            <div className="text-gray-500 text-center py-4">Loading cooperatives...</div>
          ) : (
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Username</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-100">
                {cooperativeUsers.map((user, index) => (
                  <tr key={user.id || index}>
                    <td className="px-6 py-4 whitespace-nowrap">{user.username || '-'}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{user.email || '-'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
    </div>
  );
};

export default AdminProgramReachReport; 