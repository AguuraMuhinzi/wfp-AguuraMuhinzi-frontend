// import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
// import axiosInstance from "../../axioInstance";

// // Fetch all generated reports
// export const fetchGeneratedReports = createAsyncThunk(
//   "reports/fetchGeneratedReports",
//   async (_, { rejectWithValue }) => {
//     try {
//       const response = await axiosInstance.get("reports/generated/");
//       return response.data;
//     } catch (error) {
//       return rejectWithValue(error.response?.data || "Failed to fetch reports.");
//     }
//   }
// );

// // Fetch reports generated by the current user
// export const fetchUserReports = createAsyncThunk(
//   "reports/fetchUserReports",
//   async (_, { rejectWithValue }) => {
//     try {
//       const response = await axiosInstance.get("reports/user/");
//       return response.data;
//     } catch (error) {
//       return rejectWithValue(error.response?.data || "Failed to fetch user reports.");
//     }
//   }
// );

// // Generate a report by ID
// export const generateReport = createAsyncThunk(
//   "reports/generateReport",
//   async (reportId, { rejectWithValue }) => {
//     try {
//       const response = await axiosInstance.post(`reports/generate/${reportId}/`);
//       return response.data;
//     } catch (error) {
//       return rejectWithValue(error.response?.data || "Report generation failed.");
//     }
//   }
// );

// const reportSlice = createSlice({
//   name: "reports",
//   initialState: {
//     generatedReports: [],
//     userReports: [],
//     loading: false,
//     error: null,
//     currentReport: null,
//   },
//   reducers: {},
//   extraReducers: (builder) => {
//     builder
//       .addCase(fetchGeneratedReports.pending, (state) => {
//         state.loading = true;
//         state.error = null;
//       })
//       .addCase(fetchGeneratedReports.fulfilled, (state, action) => {
//         state.generatedReports = action.payload;
//         state.loading = false;
//       })
//       .addCase(fetchGeneratedReports.rejected, (state, action) => {
//         state.error = action.payload;
//         state.loading = false;
//       })
//       .addCase(fetchUserReports.pending, (state) => {
//         state.loading = true;
//         state.error = null;
//       })
//       .addCase(fetchUserReports.fulfilled, (state, action) => {
//         state.userReports = action.payload;
//         state.loading = false;
//       })
//       .addCase(fetchUserReports.rejected, (state, action) => {
//         state.error = action.payload;
//         state.loading = false;
//       })
//       .addCase(generateReport.pending, (state) => {
//         state.loading = true;
//         state.error = null;
//       })
//       .addCase(generateReport.fulfilled, (state, action) => {
//         state.currentReport = action.payload;
//         state.loading = false;
//       })
//       .addCase(generateReport.rejected, (state, action) => {
//         state.error = action.payload;
//         state.loading = false;
//       });
//   },
// });

// export default reportSlice.reducer;


import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axiosInstance from "../../axioInstance";

// Fetch all generated reports
export const fetchGeneratedReports = createAsyncThunk(
  "reports/fetchGeneratedReports",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axiosInstance.get("reports/generated/");
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data || "Failed to fetch reports.");
    }
  }
);

// Fetch reports generated by the current user
export const fetchUserReports = createAsyncThunk(
  "reports/fetchUserReports",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axiosInstance.get("reports/user/");
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data || "Failed to fetch user reports.");
    }
  }
);

// Generate a report by configuration ID
export const generateReport = createAsyncThunk(
  "reports/generateReport",
  async (reportId, { rejectWithValue }) => {
    try {
      const response = await axiosInstance.post(`reports/generate/${reportId}/`);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data || "Report generation failed.");
    }
  }
);

// ðŸ“Š Fetch sales summary report (GET with query params)
export const fetchSalesSummaryReport = createAsyncThunk(
  "reports/fetchSalesSummaryReport",
  async ({ start_date, end_date, cooperative_id }, { rejectWithValue }) => {
    try {
      const response = await axiosInstance.get("reports/sales-summary/", {
        params: { start_date, end_date, cooperative_id }
      });
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data || "Failed to fetch sales summary.");
    }
  }
);

export const fetchAcademyCooperativeCollaboration = createAsyncThunk(
  "reports/fetchAcademyCooperativeCollaboration",
  async ({ start_date, end_date }, { rejectWithValue }) => {
    try {
      const response = await axiosInstance.get(
        "reports/academy-cooperative-collaboration/",
        { params: { start_date, end_date } }
      );
      return response.data;
    } catch (error) {
      return rejectWithValue(
        error.response?.data || "Failed to fetch academy-cooperative collaboration data."
      );
    }
  }
);

export const fetchAcademyFinancialReport = createAsyncThunk(
  "reports/fetchAcademyFinancialReport",
  async ({ academy_id, start_date, end_date }, { rejectWithValue }) => {
    try {
      const response = await axiosInstance.get("reports/academy-financial/", {
        params: {
          academy_id,
          start_date,
          end_date,
        },
      });
      return response.data;
    } catch (error) {
      return rejectWithValue(
        error.response?.data || "Failed to fetch academy financial report."
      );
    }
  }
);

export const fetchProductDemandReport = createAsyncThunk(
  "reports/fetchProductDemandReport",
  async ({ start_date, end_date, academy_id, cooperative_id }, { rejectWithValue }) => {
    try {
      const params = new URLSearchParams();
      if (start_date) params.append("start_date", start_date);
      if (end_date) params.append("end_date", end_date);
      if (academy_id) params.append("academy_id", academy_id);
      if (cooperative_id) params.append("cooperative_id", cooperative_id);

      const response = await axiosInstance.get(`reports/product-demand/?${params.toString()}`);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data || "Failed to fetch product demand report.");
    }
  }
);

const reportSlice = createSlice({
  name: "reports",
  initialState: {
    generatedReports: [],
    userReports: [],
    currentReport: null,
    salesSummary: null,
    academyCoopCollaboration: null,
    academyFinancialReport: null,
    productDemandReport: null,
    loading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      // Fetch all reports
      .addCase(fetchGeneratedReports.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchGeneratedReports.fulfilled, (state, action) => {
        state.generatedReports = action.payload;
        state.loading = false;
      })
      .addCase(fetchGeneratedReports.rejected, (state, action) => {
        state.error = action.payload;
        state.loading = false;
      })

      // Fetch user reports
      .addCase(fetchUserReports.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchUserReports.fulfilled, (state, action) => {
        state.userReports = action.payload;
        state.loading = false;
      })
      .addCase(fetchUserReports.rejected, (state, action) => {
        state.error = action.payload;
        state.loading = false;
      })

      // Generate report
      .addCase(generateReport.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(generateReport.fulfilled, (state, action) => {
        state.currentReport = action.payload;
        state.loading = false;
      })
      .addCase(generateReport.rejected, (state, action) => {
        state.error = action.payload;
        state.loading = false;
      })

      // Fetch sales summary
      .addCase(fetchSalesSummaryReport.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchSalesSummaryReport.fulfilled, (state, action) => {
        state.salesSummary = action.payload;
        state.loading = false;
      })
      .addCase(fetchSalesSummaryReport.rejected, (state, action) => {
        state.error = action.payload;
        state.loading = false;
      })

      // Fetch academy-cooperative collaboration
      .addCase(fetchAcademyCooperativeCollaboration.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchAcademyCooperativeCollaboration.fulfilled, (state, action) => {
        state.academyCoopCollaboration = action.payload;
        state.loading = false;
      })
      .addCase(fetchAcademyCooperativeCollaboration.rejected, (state, action) => {
        state.error = action.payload;
        state.loading = false;
      })

      // Fetch academy financial report
      .addCase(fetchAcademyFinancialReport.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchAcademyFinancialReport.fulfilled, (state, action) => {
        state.academyFinancialReport = action.payload;
        state.loading = false;
      })
      .addCase(fetchAcademyFinancialReport.rejected, (state, action) => {
        state.error = action.payload;
        state.loading = false;
      })

      // Fetch product demand report
      .addCase(fetchProductDemandReport.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchProductDemandReport.fulfilled, (state, action) => {
        state.productDemandReport = action.payload;
        state.loading = false;
      })
      .addCase(fetchProductDemandReport.rejected, (state, action) => {
        state.error = action.payload;
        state.loading = false;
      });
  },
});

export default reportSlice.reducer;
